/*
  Written by sigroot (github.com/sigroot)

  rp2040_patterns.h - Definitions of patterns the LEDMatrix input module can display.
  
*/

#define SIG_PATTERNS 1

#if !(SIG_FIRMWARE)
#include "rp2040_firmware.h"
#endif

//    *** Pattern Frames and Images ***

// Each gear frame is one frame of a spinning gear animation.
uint8_t FWGear[4][34][9] = {{
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x7F, 0x3F, 0x00, 0x3F, 0x7F, 0x00, 0x00 },
  { 0x00, 0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x00 },
  { 0x00, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x00 },
  { 0x3F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x3F },
  { 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F },  //Center
  { 0x3F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x3F },
  { 0x00, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x00 },
  { 0x00, 0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x00 },
  { 0x00, 0x00, 0x7F, 0x3F, 0x00, 0x3F, 0x7F, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
}, {
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x3F, 0x7F, 0x3F, 0x00, 0x3F, 0x00, 0x00 },
  { 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x00 },
  { 0x3F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x3F },
  { 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00 },
  { 0x3F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00 },  //Center
  { 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x3F },
  { 0x3F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F },
  { 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x00 },
  { 0x00, 0x00, 0x3F, 0x00, 0x7F, 0x3F, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
}, {
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x3F, 0x00, 0x00, 0x00 },
  { 0x00, 0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x00 },
  { 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F },
  { 0x3F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x3F },
  { 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00 },  //Center
  { 0x3F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x3F },
  { 0x7F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x7F },
  { 0x00, 0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x00 },
  { 0x00, 0x00, 0x00, 0x3F, 0x7F, 0x3F, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
}, {
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x7F, 0x3F, 0x00, 0x00 },
  { 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x00, 0x00 },
  { 0x3F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x3F },
  { 0x00, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F },
  { 0x3F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x3F },  //Center
  { 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00 },
  { 0x3F, 0x7F, 0x7F, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x3F },
  { 0x00, 0x00, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x00 },
  { 0x00, 0x00, 0x3F, 0x7F, 0x3F, 0x00, 0x3F, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
}};

//    *** Global Variables ***

// This is used to write a matrix of brightnesses.
uint8_t inputMatrix[34][9];

//    *** Constants ***

// This is the default scale value for most functions.
const uint8_t defaultScale = 0x7F;

//    ** Pattern functions ***

// Create an image of a spinning, though tilted, ring.
// The inputted frame determines the frame of this animation from 0-360 (repeating).
void spinningRing(int frame) {
  writeAllScale(defaultScale);
  int animDegrees = frame * PI / 180 * 100;
  for (int i = 0; i <= 33; i++) {
    for (int j = 0; j <= 8; j++) {
      int16_t newB = 35 + 10 * sin((animDegrees + j * 4 + i) / 20.0) + 10 * cos((animDegrees + j * 4 + (33 - i)) / 20.0) + 10 * sin((animDegrees + (8 - j) * 4 + (33 - i)) / 20.0) + 10 * cos((animDegrees + (8 - j) * 4 + i) / 20.0);
      inputMatrix[i][j] = getGamma(newB);
    }
  }

  writeMatrix(inputMatrix);
}

// Create a frame of a fire animation.
// Each call of this function runs the next frame of the animation.
void burn() {
  writeAllScale(defaultScale);

  for (int i = 0; i <= 33; i++) {
    for (int j = 0; j <= 8; j++) {
      inputMatrix[i][j] = constrain(int16_t(inputMatrix[(i + 1) % LEDHeight][(j + random(-2, 3)/2) % LEDWidth]) + 5 * int16_t(random(-25, 0)),0,255);//  + 2 * pow(int16_t(random(-abs((LEDWidth / 2 - j)), 0)), 2), 0, 255);
    }
  }

  writeMatrix(inputMatrix);
}

// Create a frame of a fire animation.
// Each call of this function runs the next frame of the animation.
void fireplace() {
  writeAllScale(defaultScale);

  for (int j = 0; j <= 8; j++) {
    inputMatrix[33][j] = 255;
  }
  for (int i = 0; i <= 32; i++) {
    for (int j = 0; j <= 8; j++) {
      inputMatrix[i][j] = constrain(int16_t(inputMatrix[(i + 1) % LEDHeight][(j + random(-2, 3)/2) % LEDWidth]) + 5 * int16_t(random(-25, 0)),0,255);//  + 2 * pow(int16_t(random(-abs((LEDWidth / 2 - j)), 0)), 2), 0, 255);
    }
  }

  writeMatrix(inputMatrix);
}

// Create a moving diamonds pattern.
// The inputted frame determines the frame of this animations.
void diamonds(int frame) {
  writeAllScale(defaultScale);
  int animDegrees = frame * PI / 180 * 100;
  for (int i = 0; i <= 33; i++) {
    for (int j = 0; j <= 8; j++) {
      int8_t t1 = (3*animDegrees+j*4+i)/20.0;
      int8_t t2 = (3*animDegrees+j*4+(33-i))/20.0;
      int8_t t3 = (3*animDegrees+(8-j)*4+(33-i))/20.0;
      int8_t t4 = (3*animDegrees+(8-j)*4+i)/20.0;
      //int16_t newB = 35+10*(t1-pow(t1,3)/6+pow(t1,5)/120)+10*(1-pow(t2,2)/2+pow(t2,4)/24)+10*(t3-pow(t3,3)/6+pow(t3,5)/120)+10*(1-pow(t4,2)/2+pow(t4,4)/24);
      int16_t newB = 35+10*(t1-pow(t1,3)/6+pow(t1,5)/120)+10*(1-pow(t2,2)/2+pow(t2,4)/24)+10*(t3-pow(t3,3)/6+pow(t3,5)/120)+10*(1-pow(t4,2)/2+pow(t4,4)/24);
      inputMatrix[i][j] = getGamma(newB);
    }
  }

  writeMatrix(inputMatrix);
}
